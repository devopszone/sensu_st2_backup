{
  "_args": [
    [
      {
        "raw": "text-encoding@https://registry.npmjs.org/text-encoding/-/text-encoding-0.5.5.tgz",
        "scope": null,
        "escapedName": "text-encoding",
        "name": "text-encoding",
        "rawSpec": "https://registry.npmjs.org/text-encoding/-/text-encoding-0.5.5.tgz",
        "spec": "https://registry.npmjs.org/text-encoding/-/text-encoding-0.5.5.tgz",
        "type": "remote"
      },
      "/root/st2chatops"
    ]
  ],
  "_from": "text-encoding@>=0.5.5 <0.6.0",
  "_id": "text-encoding@0.5.5",
  "_inCache": true,
  "_location": "/hubot-matteruser/mattermost-client/text-encoding",
  "_phantomChildren": {},
  "_requested": {
    "raw": "text-encoding@https://registry.npmjs.org/text-encoding/-/text-encoding-0.5.5.tgz",
    "scope": null,
    "escapedName": "text-encoding",
    "name": "text-encoding",
    "rawSpec": "https://registry.npmjs.org/text-encoding/-/text-encoding-0.5.5.tgz",
    "spec": "https://registry.npmjs.org/text-encoding/-/text-encoding-0.5.5.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/hubot-matteruser/mattermost-client"
  ],
  "_resolved": "https://registry.npmjs.org/text-encoding/-/text-encoding-0.5.5.tgz",
  "_shasum": "d29845d9c1f2ac5ceba4bf861c561856c523ac53",
  "_shrinkwrap": null,
  "_spec": "text-encoding@https://registry.npmjs.org/text-encoding/-/text-encoding-0.5.5.tgz",
  "_where": "/root/st2chatops",
  "author": {
    "name": "Joshua Bell",
    "email": "inexorabletash@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/inexorabletash/text-encoding/issues"
  },
  "contributors": [
    {
      "name": "Joshua Bell",
      "email": "inexorabletash@gmail.com"
    },
    {
      "name": "Rick Eyre",
      "email": "rick.eyre@outlook.com"
    },
    {
      "name": "Eugen Podaru",
      "email": "eugen.podaru@live.com"
    },
    {
      "name": "Filip DupanoviÄ‡",
      "email": "filip.dupanovic@gmail.com"
    },
    {
      "name": "Anne van Kesteren",
      "email": "annevk@annevk.nl"
    },
    {
      "name": "Author: Francis Avila",
      "email": "francisga@gmail.com"
    },
    {
      "name": "Michael J. Ryan",
      "email": "tracker1@gmail.com"
    },
    {
      "name": "Pierre Queinnec",
      "email": "pierre@queinnec.org"
    },
    {
      "name": "Zack Weinberg",
      "email": "zackw@panix.com"
    }
  ],
  "dependencies": {},
  "description": "Polyfill for the Encoding Living Standard's API.",
  "devDependencies": {},
  "files": [
    "index.js",
    "lib/encoding.js",
    "lib/encoding-indexes.js"
  ],
  "homepage": "https://github.com/inexorabletash/text-encoding",
  "keywords": [
    "encoding",
    "decoding",
    "living standard"
  ],
  "license": "Unlicense",
  "main": "index.js",
  "name": "text-encoding",
  "optionalDependencies": {},
  "readme": "text-encoding\n==============\n\nThis is a polyfill for the [Encoding Living Standard](https://encoding.spec.whatwg.org/)\nAPI for the Web, allowing encoding and decoding of textual data to and from Typed Array\nbuffers for binary data in JavaScript.\n\nBy default it adheres to the spec and does not support *encoding* to non-UTF encodings,\nonly *decoding*. It is also implemented to match the specification's algorithms, rather\nthan for performance. The intended use is within Web pages, so it has no dependency\non server frameworks or particular module schemes.\n\nBasic examples and tests are included.\n\n### Install ###\n\nThere are a few ways you can get the `text-encoding` library.\n\n#### Node ####\n\n`text-encoding` is on `npm`. Simply run:\n\n```js\nnpm install text-encoding\n```\n\nOr add it to your `package.json` dependencies.\n\n#### Bower ####\n\n`text-encoding` is on `bower` as well. Install with bower like so:\n\n```js\nbower install text-encoding\n```\n\nOr add it to your `bower.json` dependencies.\n\n### HTML Page Usage ###\n\n```html\n  <!-- Required for non-UTF encodings -->\n  <script src=\"encoding-indexes.js\"></script>\n  <script src=\"encoding.js\"></script>\n```\n\n### API Overview ###\n\nBasic Usage\n\n```js\n  var uint8array = TextEncoder(encoding).encode(string);\n  var string = TextDecoder(encoding).decode(uint8array);\n```\n\nStreaming Decode\n\n```js\n  var string = \"\", decoder = TextDecoder(encoding), buffer;\n  while (buffer = next_chunk()) {\n    string += decoder.decode(buffer, {stream:true});\n  }\n  string += decoder.decode(); // finish the stream\n```\n\n### Encodings ###\n\nAll encodings from the Encoding specification are supported:\n\nutf-8 ibm866 iso-8859-2 iso-8859-3 iso-8859-4 iso-8859-5 iso-8859-6 iso-8859-7 iso-8859-8 iso-8859-8-i iso-8859-10 iso-8859-13 iso-8859-14 iso-8859-15 iso-8859-16 koi8-r koi8-u macintosh windows-874 windows-1250 windows-1251 windows-1252 windows-1253 windows-1254 windows-1255 windows-1256 windows-1257 windows-1258 x-mac-cyrillic gb18030 hz-gb-2312 big5 euc-jp iso-2022-jp shift_jis euc-kr replacement utf-16be utf-16le x-user-defined\n\n(Some encodings may be supported under other names, e.g. ascii, iso-8859-1, etc.\nSee [Encoding](https://encoding.spec.whatwg.org/) for additional labels for each encoding.)\n\nEncodings other than **utf-8**, **utf-16le** and **utf-16be** require an additional\n`encoding-indexes.js` file to be included. It is rather large\n(596kB uncompressed, 188kB gzipped); portions may be deleted if\nsupport for some encodings is not required.\n\n### Non-Standard Behavior ###\n\nAs required by the specification, only encoding to **utf-8**,\n**utf-16le** and **utf-16be** is supported. If you want to try it out, you can\nforce a non-standard behavior by passing the `NONSTANDARD_allowLegacyEncoding`\noption to TextEncoder. For example:\n\n```js\nvar uint8array = new TextEncoder(\n  'windows-1252', { NONSTANDARD_allowLegacyEncoding: true }).encode(text);\n```\n\nBut note that the above won't work if you're using the polyfill in a browser that\nnatively supports the TextEncoder API natively, since the polyfill won't be used!\n\nYou can force the polyfill to be used by using this before the polyfill:\n\n```html\n<script>\nwindow.TextEncoder = window.TextDecoder = null;\n</script>\n```\n\nTo support the legacy encodings (which may be stateful), the TextEncoder `encode()`\nmethod accepts an optional dictionary and `stream` option,\ne.g. `encoder.encode(string, {stream: true});` This is not needed for the\nstateless UTF encodings since the input is always in complete code points.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/inexorabletash/text-encoding.git"
  },
  "version": "0.5.5"
}
