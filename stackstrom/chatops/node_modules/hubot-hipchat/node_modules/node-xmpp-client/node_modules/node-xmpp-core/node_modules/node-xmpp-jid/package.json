{
  "_args": [
    [
      {
        "raw": "node-xmpp-jid@https://registry.npmjs.org/node-xmpp-jid/-/node-xmpp-jid-2.3.0.tgz",
        "scope": null,
        "escapedName": "node-xmpp-jid",
        "name": "node-xmpp-jid",
        "rawSpec": "https://registry.npmjs.org/node-xmpp-jid/-/node-xmpp-jid-2.3.0.tgz",
        "spec": "https://registry.npmjs.org/node-xmpp-jid/-/node-xmpp-jid-2.3.0.tgz",
        "type": "remote"
      },
      "/root/st2chatops"
    ]
  ],
  "_from": "node-xmpp-jid@>=2.0.0 <3.0.0",
  "_id": "node-xmpp-jid@2.3.0",
  "_inCache": true,
  "_location": "/hubot-hipchat/node-xmpp-client/node-xmpp-core/node-xmpp-jid",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-xmpp-jid@https://registry.npmjs.org/node-xmpp-jid/-/node-xmpp-jid-2.3.0.tgz",
    "scope": null,
    "escapedName": "node-xmpp-jid",
    "name": "node-xmpp-jid",
    "rawSpec": "https://registry.npmjs.org/node-xmpp-jid/-/node-xmpp-jid-2.3.0.tgz",
    "spec": "https://registry.npmjs.org/node-xmpp-jid/-/node-xmpp-jid-2.3.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/hubot-hipchat/node-xmpp-client/node-xmpp-core"
  ],
  "_resolved": "https://registry.npmjs.org/node-xmpp-jid/-/node-xmpp-jid-2.3.0.tgz",
  "_shasum": "60a3c950582a0cdcfda074494357a85178f38878",
  "_shrinkwrap": null,
  "_spec": "node-xmpp-jid@https://registry.npmjs.org/node-xmpp-jid/-/node-xmpp-jid-2.3.0.tgz",
  "_where": "/root/st2chatops",
  "author": {
    "name": "Sonny Piers",
    "email": "sonny@fastmail.net"
  },
  "bugs": {
    "url": "https://github.com/node-xmpp/JID/issues"
  },
  "dependencies": {},
  "description": "XMPP identifiers (JID) for JavaScript",
  "devDependencies": {
    "sinon": "^1.17.2"
  },
  "homepage": "https://github.com/node-xmpp/JID",
  "keywords": [
    "XMPP",
    "JID"
  ],
  "license": "MIT",
  "name": "node-xmpp-jid",
  "optionalDependencies": {},
  "readme": "JID\n===\n\nXMPP identifiers (JID) for JavaScript\n\n[![Travis](https://img.shields.io/travis/node-xmpp/JID/master.svg?style=flat-square)](https://travis-ci.org/node-xmpp/JID/branches)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square)](http://standardjs.com/)\n\n| JID type | local | @ |     domain     | / |  resource  |          usage         |\n|:--------:|:-----:|:-:|:--------------:|:-:|:----------:|:----------------------:|\n|  domain  |       |   | wonderland.net |   |            | servers and components |\n|   bare   | alice | @ | wonderland.net |   |            | users                  |\n|   full   | alice | @ | wonderland.net | / | rabbithole | user resource (device) |\n\nhttps://en.wikipedia.org/wiki/XMPP#Decentralization_and_addressing\n\n# Usage\n\n```javascript\nvar JID = require('jid')\n\n/*\n * All return an instance of JID.JID, the new operator is optional.\n */\nvar addr = new JID('alice@wonderland.net/rabbithole')          // OK\nvar addr = JID`${'alice'}@${'wonderland.net'}/${'rabbithole'}` // OK, es6 tagged template string\nvar addr = new JID('alice', 'wonderland.net', 'rabbithole')    // BEST; see section on escaping below\n\naddr instanceof JID.JID // true\n\n// domain JIDs are created passing the domain as the first argument\nvar addr = JID('wonderland.net')\n\n/*\n * local\n */\naddr.local = 'alice'\naddr.local      // alice\n// same as\naddr.setLocal('alice')\naddr.getLocal() // alice\n\n/*\n * domain\n */\naddr.domain = 'wonderland.net'\naddr.domain      // wonderland.net\n// same as\naddr.setDomain('wonderland.net')\naddr.getDomain() // wonderland.net\n\n/*\n * resource\n */\naddr.resource = 'rabbithole'\naddr.resource      // rabbithole\n// same as\naddr.setResource('rabbithole')\naddr.getResource() // rabbithole\n\naddr.toString() // alice@wonderland.net/rabbithole\naddr.bare()     // returns a JID without resource\n\naddr.equals(some_jid) // returns true if the two JIDs are equal, false otherwise\n// same as\nJID.equal(addr, some_jid)\n\nJID.is(addr) // returns true if the passed argument is an instance of JID.JID, false otherwise\n```\n\n# Escaping\n\nThe [XEP-0106](http://xmpp.org/extensions/xep-0106.html) defines a method to escape and unescape characters that aren't allowed in the local part of the JID. This library fully implement it but because `@` and `/` are ones of them and used as JID separators, you should always prefer the following syntax\n\n```javascript\n// GOOD\nnew JID(local, domain, resource)\n```\n\nover\n\n```javascript\n// BAD\nnew JID(local@domain/resource)\n```\n\nfor user input.\n\n# References\n\n* [RFC 7622 XMPP Address Format](https://tools.ietf.org/html/rfc7622) mostly implemented, l10n WIP\n* [XEP-0106 JID Escaping](https://xmpp.org/extensions/xep-0106.html) implemented\n\n## Deprecated\n\n* [XEP-0029 Definition of Jabber Identifiers (JIDs)](https://xmpp.org/extensions/xep-0029.html) 2003\n* [RFC 3920 XMPP addressing](https://tools.ietf.org/html/rfc3920#section-3) 2004\n* [RFC 3920 XMPP Address Format](https://tools.ietf.org/html/rfc6122) 2011\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/node-xmpp/JID.git"
  },
  "scripts": {
    "browserify": "browserify index.js -s JID -o bundle.js",
    "lint": "standard",
    "preversion": "npm test",
    "test": "npm run unit && npm run lint && npm run browserify",
    "unit": "mocha test/"
  },
  "version": "2.3.0"
}
