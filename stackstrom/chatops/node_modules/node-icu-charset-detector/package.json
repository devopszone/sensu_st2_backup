{
  "_args": [
    [
      {
        "raw": "node-icu-charset-detector@https://registry.npmjs.org/node-icu-charset-detector/-/node-icu-charset-detector-0.2.0.tgz",
        "scope": null,
        "escapedName": "node-icu-charset-detector",
        "name": "node-icu-charset-detector",
        "rawSpec": "https://registry.npmjs.org/node-icu-charset-detector/-/node-icu-charset-detector-0.2.0.tgz",
        "spec": "https://registry.npmjs.org/node-icu-charset-detector/-/node-icu-charset-detector-0.2.0.tgz",
        "type": "remote"
      },
      "/root/st2chatops"
    ]
  ],
  "_from": "node-icu-charset-detector@>=0.2.0 <0.3.0",
  "_id": "node-icu-charset-detector@0.2.0",
  "_inCache": true,
  "_location": "/node-icu-charset-detector",
  "_optional": true,
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-icu-charset-detector@https://registry.npmjs.org/node-icu-charset-detector/-/node-icu-charset-detector-0.2.0.tgz",
    "scope": null,
    "escapedName": "node-icu-charset-detector",
    "name": "node-icu-charset-detector",
    "rawSpec": "https://registry.npmjs.org/node-icu-charset-detector/-/node-icu-charset-detector-0.2.0.tgz",
    "spec": "https://registry.npmjs.org/node-icu-charset-detector/-/node-icu-charset-detector-0.2.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/irc"
  ],
  "_resolved": "https://registry.npmjs.org/node-icu-charset-detector/-/node-icu-charset-detector-0.2.0.tgz",
  "_shasum": "c2320da374ddcb671fc54cb4a0e041e156ffd639",
  "_shrinkwrap": null,
  "_spec": "node-icu-charset-detector@https://registry.npmjs.org/node-icu-charset-detector/-/node-icu-charset-detector-0.2.0.tgz",
  "_where": "/root/st2chatops",
  "author": {
    "name": "Masafumi Oyamada",
    "email": "stillpedant@gmail.com",
    "url": "http://mooz.github.com/"
  },
  "bugs": {
    "url": "http://github.com/mooz/node-icu-charset-detector/issues"
  },
  "dependencies": {
    "nan": "^2.3.3"
  },
  "description": "Simple binding for ICU charset detector",
  "devDependencies": {},
  "engines": {
    "node": ">=0.6"
  },
  "gypfile": true,
  "homepage": "http://github.com/mooz/node-icu-charset-detector",
  "keywords": [
    "charset-detection",
    "icu"
  ],
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "main": "./node-icu-charset-detector.js",
  "name": "node-icu-charset-detector",
  "optionalDependencies": {},
  "readme": "# ICU Character Set Detection for Node.js\n\n>Character set detection is the process of determining the character set, or encoding, of character data in an unknown format.\n\nA simple binding of ICU character set detection (http://userguide.icu-project.org/conversion/detection) for Node.js.\n\n## Installation\n\nAt first, install `libicu` into your system (See [this instruction](#installing-icu) for details).\n\nAfter that, install `node-icu-charset-detector` from npm.\n\n    npm install node-icu-charset-detector\n\n### Installing ICU\n\n#### Linux\n\n* Debian (Ubuntu)\n\n    apt-get install libicu-dev\n\n* Gentoo\n\n    emerge icu\n\n* Fedora/CentOS\n\n    yum install libicu-devel\n\n#### OSX\n\n* MacPorts\n\n    port install icu +devel\n\n* Homebrew\n\n```shell\nbrew install icu4c\nbrew link icu4c --force\n```\n\nIf experiencing issues with 'homebrew' installing version 50.1 of icu4c, try the following:\n\n```shell\nbrew search icu4c\nbrew tap homebrew/versions\nbrew versions icu4c\ncd $(brew --prefix) && git pull --rebase\ngit checkout c25fd2f $(brew --prefix)/Library/Formula/icu4c.rb\nbrew install icu4c\n```\n\n* From source\n\n```shell\ncurl -O http://download.icu-project.org/files/icu4c/52.1/icu4c-52_1-src.tgz\ntar xzvf icu4c-4_4_2-src.tgz\ncd icu/source\nchmod +x runConfigureICU configure install-sh\n./runConfigureICU MacOSX\nmake\nsudo make install\nxcode-select --install\n```\n\n## Usage\n\n### Simple usage\n\n`node-icu-charset-detector` provides a function `detectCharset(buffer)`, where `buffer` is an instance of `Buffer` whose charset should be detected.\n\n```javascript\nvar charsetDetector = require(\"node-icu-charset-detector\");\n\nvar buffer = fs.readFileSync(\"/path/to/the/file\");\nvar charset = charsetDetector.detectCharset(buffer);\n\nconsole.log(\"charset name: \" + charset.toString());\nconsole.log(\"language: \" + charset.language);\nconsole.log(\"detection confidence: \" + charset.confidence);\n```\n\n`detectCharset(buffer)` returns the detected charset name for `buffer`, and the returned charset name has two extra properties `language` and `confidence`:\n\n- `charset.language`\n  - language name for the detected character set.\n- `charset.confidence`\n  - confidence of the charset detection for `charset`.\n\n### Leveraging node-iconv\n\nSince ICU itself does not have a feature to convert character sets, you may need to use `node-iconv` (https://github.com/bnoordhuis/node-iconv), which has a powerful character sets converting feature.\n\nHere is a simple example to leverage `node-iconv` to convert character sets not supported by Node itself.\n\n```javascript\nfunction bufferToString(buffer) {\n  var charsetDetector = require(\"node-icu-charset-detector\");\n  var charset = charsetDetector.detectCharset(buffer).toString();\n\n  try {\n    return buffer.toString(charset);\n  } catch (x) {\n    var Iconv = require(\"iconv\").Iconv;\n    var charsetConverter = new Iconv(charset, \"utf8\");\n    return charsetConverter.convert(buffer).toString();\n  }\n}\n\nvar buffer = fs.readFileSync(\"/path/to/the/file\");\nvar bufferString = bufferToString(buffer);\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mooz/node-icu-charset-detector.git"
  },
  "scripts": {
    "install": "node-gyp rebuild"
  },
  "version": "0.2.0"
}
