{
  "_args": [
    [
      {
        "raw": "csco-spark@https://registry.npmjs.org/csco-spark/-/csco-spark-3.1.0.tgz",
        "scope": null,
        "escapedName": "csco-spark",
        "name": "csco-spark",
        "rawSpec": "https://registry.npmjs.org/csco-spark/-/csco-spark-3.1.0.tgz",
        "spec": "https://registry.npmjs.org/csco-spark/-/csco-spark-3.1.0.tgz",
        "type": "remote"
      },
      "/root/st2chatops"
    ]
  ],
  "_from": "csco-spark@3.1.0",
  "_id": "csco-spark@3.1.0",
  "_inCache": true,
  "_location": "/hubot-spark/csco-spark",
  "_phantomChildren": {},
  "_requested": {
    "raw": "csco-spark@https://registry.npmjs.org/csco-spark/-/csco-spark-3.1.0.tgz",
    "scope": null,
    "escapedName": "csco-spark",
    "name": "csco-spark",
    "rawSpec": "https://registry.npmjs.org/csco-spark/-/csco-spark-3.1.0.tgz",
    "spec": "https://registry.npmjs.org/csco-spark/-/csco-spark-3.1.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/hubot-spark"
  ],
  "_resolved": "https://registry.npmjs.org/csco-spark/-/csco-spark-3.1.0.tgz",
  "_shasum": "04c6be32bd9271b7e316b45c0afd1aabccc49d3d",
  "_shrinkwrap": null,
  "_spec": "csco-spark@https://registry.npmjs.org/csco-spark/-/csco-spark-3.1.0.tgz",
  "_where": "/root/st2chatops",
  "author": {
    "name": "Sam Womack"
  },
  "bugs": {
    "url": "https://github.com/drkchiloll/csco-spark/issues"
  },
  "dependencies": {
    "bluebird": "^3.0.5",
    "request": "^2.65.0"
  },
  "description": "A module that performs tasks using the Cisco Spark API",
  "devDependencies": {},
  "homepage": "https://github.com/drkchiloll/csco-spark#readme",
  "license": "MIT",
  "main": "index.js",
  "name": "csco-spark",
  "optionalDependencies": {},
  "readme": "# Cisco Spark API Integration\n\n##### Install\n\n```\nnpm install --save csco-spark\n```\n\n##### Special Note\n\n** This requires __NodeJS version 4+__ as it utilizes some ES2015 (ES6) features not found in other versions of Node.\n\n### Listing Rooms, Memberships, Webhooks, People, and Messages\n\nWhen retrieving a Spark Users Rooms/Memberships, Webhooks, the Messages in a given Spark Room, and the Memberships in a room where you are the Member of, The Spark API uses Pagination to control the response time of a particular API Call.\n\nIn the Library I have implemented Pagination in the retrieval of these objects utilizing NodeJS EventEmitters.\n\n```javascript\nvar Spark = require('csco-spark');\nvar spark = Spark({\n  uri: 'https://api.ciscospark.com/v1',\n  token: 'Spark Access Token'\n});\n// Getting Spark Rooms\nvar listRooms = spark.listItemEvt({\n  item: 'rooms',\n  max: '15' || undefined // Default = 50\n});\n// Listen for Rooms\nlistRooms.on('rooms', function(rooms) {\n  console.log(rooms)\n});\n\nlistRooms.on('rooms-end', function(rooms) {\n  // Yes I am sending Data on the End Event\n  // I believe most don't\n})\n```\n\nRefer to the Examples Listings for utilizing the rest..\n\n### General Module Usage\n\nIf there are any examples you would like to see..just add an issue and I can get it posted for you...\n\n```javascript\nvar sparkFactory = require('csco-spark'),\n\nvar spark = sparkFactory({\n  uri: 'https://api.ciscospark.com/v1',\n  token: 'token'\n});\n\n// Send a Message\nspark.sendMessage({\n  roomId:'roomId',\n  text: 'message'\n}).then((res) => {\n  /*Store the res data?*/\n});\n\n// Create a Spark Room\nspark.createRoom({ title: 'title'}).then((res) => {\n  /*Store the res data?*/\n});\n\n// Delete a Room\nspark.removeRoom(roomId).then((res) {\n  /* resp should be null */\n});\n\n// Add User To a Spark Room\nspark.addMemberToRoom({\n  roomId: 'id',\n  personEmail: 'someone@example.com' || null,\n  personId: 'spark personId' || null,\n  isModerator: true || false\n}).then((resp) => {\n  /* handle response */\n});\n\n// Download Files from Spark Room\nspark.dlFiles('uri of file location', 'optional token').then((resp) => {\n  /*\n   * RESP is a List of Objects Consisting of the Below:\n   * [{fileName: `filename`, blob: `buffered contents of file`}]\n   * The buffered contents of the file is ready to be written to disk\n   * it is not human readable\n   */\n});\n\n// Get ALL Messages from a Spark Room\nspark.getMessages({ roomId: 'spark roomId'}).then((messages) => {\n  /*\n   * The LIB handles Pagination for You; it DLs 200 Messages at a time\n   * and adds them to a List. All the properties of the Messages object\n   * are untouched\n   */\n});\n\n// Get all the Rooms a Spark User is In\nspark.getRooms().then((rooms) => {\n  /*\n   * Like Messages, pagination is handled for you.\n   */\n});\n\n// Get Access/Refresh Token\n// Authentication on Behalf of a User (Granting App Permissions)\n// Refer to https://developer.ciscospark.com/authentication.html\nspark.getAccessToken({\n  code: 'code received from /authorize step1',\n  id: 'application clientId',\n  secret: 'application clientSecret',\n  redirectUri: 'application redirect_uri'\n}).then((resp) => {\n  var authData = resp;\n  /*\n   * {access_token: 'token', refresh_token: 'token', ...}\n   */\n});\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/drkchiloll/csco-spark.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "3.1.0"
}
